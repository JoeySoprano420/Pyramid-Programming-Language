# Pyramid Programming Language Syntax File

# Identifiers
# Identifiers are case-sensitive and can contain letters, digits, and underscores.
# They cannot start with a digit.
identifier = "myVariable"

# Keywords
# Keywords are reserved words and cannot be used as identifiers.
keywords = ["if", "else", "while", "def", "return", "import", "export", "const"]

# Comments
# Single-line comments start with #
# Multi-line comments are enclosed in /* */
comment_example = "# This is a comment"

multi_line_comment = "/* This is a multi-line comment */"

# Data Types
# Pyramid supports a variety of data types: Integer, Float, String, Boolean, Null, Array, Object, Function

integer_example = 42
float_example = 3.14
string_example = "Hello, Pyramid!"
boolean_example = true
null_example = null

# Operators
# Pyramid supports various operators

arithmetic_operators = ["+", "-", "*", "/", "%"]
comparison_operators = ["==", "!=", "<", ">", "<=", ">="]
logical_operators = ["and", "or", "not"]
assignment_operators = ["=", "+=", "-=", "*=", "/="]
ternary_operator = "? :"

# Control Flow
# Pyramid supports if-else, while, and for loops.

if_statement = """
if condition:
    // do something
else:
    // do something else
"""

while_statement = """
while condition:
    // do something
"""

for_statement = """
for item in iterable:
    // process item
"""

# Functions
# Functions are defined using the def keyword.

function_definition = """
def function_name(param1, param2):
    // function body
    return value
"""

# Classes and Objects
# Pyramid supports object-oriented programming with classes.

class_definition = """
class ClassName:
    def __init__(self, param1, param2):
        self.param1 = param1
        self.param2 = param2

    def method(self):
        // method body
"""

# Importing Modules
# Modules are imported using the import keyword.

import_statement = "import math
